
$button-geometry: (
  tiny: (
    padding-vert: 3px,
    padding-horiz: 5px
  ),
  small: (
    padding-vert: .4rem,
    padding-horiz: .7rem
  ),
  medium: (
    padding-vert: .8rem,
    padding-horiz: 1.4rem
  ),
  large: (
    padding-vert: 1.2rem,
    padding-horiz: 2.1rem
  )
);

@mixin button-builder($color-map, $colorClassName: '') {
  @each $size, $geometry-map in $geometry {

    $height: get-height($size);

    @if $size == 'medium' {
      $sizeClassName: '';
    } @else {
      $sizeClassName: '.' + $size;
    }

    a.btn#{$sizeClassName}#{$colorClassName},
    button#{$sizeClassName}#{$colorClassName} {
      display: inline-block;

      text-decoration: none;

      border-radius: $border-radius;

      $padding-map: map-get($button-geometry, $size);
      $padding-vert: map-get($padding-map, padding-vert);
      $padding-horiz: map-get($padding-map, padding-horiz);
      padding: $padding-vert $padding-horiz;

      @include bg-color($color-map, base);

      &.disabled,
      &.disabled:hover,
      &.disabled:active {
        @include bg-color($color-map, disabled);

        cursor: default;
      }

      &.hover,
      &:hover {
        @include bg-color($color-map, hover);
      }

      &.active,
      &:active {
        @include bg-color($color-map, active);
      }

      @extend .opensans-w600;

      &.fa {
        font-family: FontAwesome;

        $font-size: map-get($fa-font-sizes, $size);
        font-size: $font-size;

        padding: 0 ($height / 4);

        width: $font-size * 1.7;

        text-align: center;
      }

      color: #FFF;

      @include font-size($size);

      text-transform: uppercase;
      letter-spacing: .2em;

      border: none;
    }
  }
}

@include button-builder($clr-default);

@include button-builder($clr-primary, '.primary');

@include button-builder($clr-secondary, '.secondary');
